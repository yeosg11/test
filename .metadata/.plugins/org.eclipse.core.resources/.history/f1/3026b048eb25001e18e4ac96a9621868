package chapter3;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Map;
import java.util.Date;

// Collection Framework
// 데이터를 저장하는 구조를 제공하는 표준화된 인터페이스 및 클래스
// 저장, 검색, 수정, 삭제에 대한 기능을 제공
// 

public class CollectionFramework {

	private static final String Map = null;
	private static final String Date date  = null;

	public static void main(String[] args) {
		
		// List 인터페이스
		// 순서가 있고 중복을 허용하는 데이터 저장 구조를 표현할 때 사용
		// 1. ArrayList 구현체
		// 내부적인 인덱스를 사용하여 요소를 저장 - 인덱스로의 접근이 빠름
		
		List<Integer> arrayList = new ArrayList<Integer>(); //[]
		//list에 데이터 추가 -add();
		arrayList.add(10); // [10]
		arrayList.add(12); // [10,12]
		arrayList.add(1, 13); // [10,13,12]
		// arrayList.add("10");
		System.out.println(arrayList);
		//list에 요소 불러오기 - get();
		System.out.println(arrayList.get(2));
		// list에 요소 수정하기 -set();
	    arrayList.set(1, 100);
	    System.out.println(arrayList);
	    
		// 2. LinkedList 구현체
		// 내부적인 이중 연결 리스트 (요소와 요소의 관계가 맻어져 있음)를 사용하여 요소를 저장 - 데이터 추
	    // Set 인터페이스
	    // 순서가 없고 중복을 허용하지 않는 데이터 저장 구조를 표현할 때 사용
	    
	    // 1. HashSet
	    // 해싱 기법을 이용해서 요소를 저장 - 검색 속도가 빠름
	    Set<Integer> hashSet = new HashSet<Integer>();
	    // set에 데이터 추가 - add();
	    hashSet.add(99);
	    hashSet.add(77);
	    // hashSet.add(1, 0);
	    hashSet.add(99);
	    System.out.println(hashSet);
	    
	    // set에 데이터 존재 여부 - contains();
	    System.out.println(hashSet.contains(98));
	    
	    // set에 데이터 삭제 - remove();
	    hashSet.remove(99);
	    System.out.println(hashSet);
	    System.out.println(hashSet.size());
	    
	    // 2. LinkedHashSet
	    // 해싱 기법과 요소와 요소간의 연결을 이용해서 요소를 저장 - 추가, 삭제 빠름
	    Set<Integer> linkedHashSet = new LinkedHashSet<Integer>();
	    
	    
	    //3. TreeSet
	    // Tree 구조를 사용하여 요소를 저장 - 요소가 정렬되어 저장됨.
	    Set<Integer> treeSet = new TreeSet<Integer>();
	    treeSet.add(99);
	    treeSet.add(77);
	    System.out.println(treeSet);
	    
	    // map 인터페이스
	    // key와 value를 한 쌍으로 요소를 가지는 구조이며, 순서가 없고 key에 대해서 중복을 허용하지 않음
	    
	    //1. HashMap 구현체
	    // 해싱 기법을 이용하여 데이터를 저장 - 검색 속도가 빠름
	    Map<String,String> hashMap = new HashMap <String, String> ();
	    	    
	    // map에 데이터 추가 - put();
	    hashMap.put("banna", "바나나");
	    
	    
	  
	    //2. LinkedHashMap 구현체
	    // 해싱 기법과 요소와 요소간을 연결하여 데이터를 저장 - 추가, 삭제가 빠름
	    
	    // 3. TreeMap 구현체
	    // 트리 기법을 이용하여 데이터를 저장 - key를 기준으로 정렬되어 저장됨.
	    
	    //1. System.currentTimeMillis();
	    // 현재 운영체제의 시간을 1970년 1월
	    
	    long start = System.currentTimeMillis();
	    System.out.println("시작 시간 : " + start);
	    
	    for (int index = 0; index < 10_000_000; index++) {
	    	System.out.println("출력중...");
	    }
	    
	    long end = System.currentTimeMillis();
	    System.out.println("종료 시간 : " + end);
	    
	    System.out.println("경과 시간 : " + (end -start));
	    
	    //2. Date 클래스
	    // 초창기 자바에서부터 사용되어 오던 날짜 및 시간 관련 클래스
	    // JDK 1.0~ JDK 1.1 -> 사용하지 않는 것을 권장하고 있음.
	    // 날짜를 표시하는 타입에서 
	    
	    Date date = new Date();
	    System.out.println(date);
	    
	    
	    
	    
	   
	   
	    
	    
	    
	    
	    
	}

}
